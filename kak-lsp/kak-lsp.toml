lsp_hover_anchor=true
lsp_hover_max_lines=6
snippet_support = false
verbosity = 3

[server]
timeout = 1800 # seconds = 30 minutes

# [language.c_cpp]
# filetypes = ["c", "cpp"]
# roots = [".ccls-root", ".ccls", "compile_commands.json", "./build/compile_commands.json"]
# command = "ccls"
# args = ["--init={\"completion\":{\"detailedLabel\":false}}"]

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_commands.json", "./build/compile_commands.json", ".clangd", ".git", ".hg"]
command = "clangd"
offset_encoding = "utf-8"

[language.cmake]
filetypes= ["cmake"]
command= "cmake-language-server"
roots= [ "build/" ]

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
command = "pyls"
offset_encoding = "utf-8"
workaround_server_sends_plaintext_labeled_as_markdown = true
settings_section = "_"
[language.python.settings._]
# See https://github.com/palantir/python-language-server#configuration
# and https://github.com/palantir/python-language-server/blob/develop/vscode-client/package.json
pyls.configurationSources = ["flake8"]

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "sh"
args = [
    "-c",
    """
        if path=$(rustup which rust-analyzer 2>/dev/null); then
            "$path"
        else
            rust-analyzer
        fi
    """,
]
settings_section = "rust-analyzer"
[language.rust.settings.rust-analyzer]
# See https://rust-analyzer.github.io/manual.html#configuration
hoverActions.enable = false # kak-lsp doesn't support this at the moment
# cargo.features = []

[language.sh]
filetypes = ["sh"]
command = "bash-language-server"
roots = [".", ".git", ".hg"]
args = ["start"]

# SEMANTIC TOKENS

[[semantic_tokens]]
token = "arithmetic"
face = "operator"

[[semantic_tokens]]
token = "attribute"
face = "module"

[[semantic_tokens]]
token = "boolean"
face = "value"

[[semantic_tokens]]
token = "builtinType"
face = "type"

[[semantic_tokens]]
token = "character"
face = "string"

[[semantic_tokens]]
token = "colon"
face = "operator"

[[semantic_tokens]]
token = "comma"
face = "operator"

[[semantic_tokens]]
token = "comment"
face = "documentation"
modifiers = ["documentation"]

[[semantic_tokens]]
token = "comparison"
face = "operator"

[[semantic_tokens]]
token = "enum"
face = "module"

[[semantic_tokens]]
token = "enumMember"
face = "enum"

[[semantic_tokens]]
token = "formatSpecifier"
face = "operator"

[[semantic_tokens]]
token = "function"
face = "function"

[[semantic_tokens]]
token = "interface"
face = "module"

[[semantic_tokens]]
token = "keyword"
face = "keyword"

[[semantic_tokens]]
token = "lifetime"
face = "enum"

[[semantic_tokens]]
token = "logical"
face = "operator"

[[semantic_tokens]]
token = "macro"
face = "function"

[[semantic_tokens]]
token = "method"
face = "function"

[[semantic_tokens]]
token = "namespace"
face = "module"

[[semantic_tokens]]
token = "number"
face = "value"

[[semantic_tokens]]
token = "operator"
face = "operator"

[[semantic_tokens]]
token = "parameter"
face = "parameter"

[[semantic_tokens]]
token = "punctuation"
face = "operator"

[[semantic_tokens]]
token = "regexp"
face = "value"

[[semantic_tokens]]
token = "selfKeyword"
face = "value"

[[semantic_tokens]]
token = "semicolon"
face = "operator"

[[semantic_tokens]]
token = "string"
face = "string"

[[semantic_tokens]]
token = "struct"
face = "module"

[[semantic_tokens]]
token = "type"
face = "type"

[[semantic_tokens]]
token = "typeAlias"
face = "type"

[[semantic_tokens]]
token = "typeParameter"
face = "operator"

[[semantic_tokens]]
token = "unresolvedReference"
face = "module"

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["readonly"]

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["constant"]

[[semantic_tokens]]
token = "variable"
face = "variable"
